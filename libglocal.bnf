/*
 * libglocal-idea-plugin
 *
 * Copyright 2018 SOFe
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
	parserClass="io.github.sof3.libglocal.idea.parser.LgcParser"
	extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

	psiClassPrefix="Lgc"
	psiImplClassSuffix="Impl"
	psiPackage="io.github.sof3.libglocal.idea.psi"
	psiImplPackage="io.github.sof3.libglocal.idea.psi.impl"

	elementTypeHolderClass="io.github.sof3.libglocal.idea.parser.LgcElements"
	elementTypeClass="io.github.sof3.libglocal.idea.parser.LgcElementType"
	tokenTypeClass="io.github.sof3.libglocal.idea.parser.LgcTokenType"

	tokens=[
		T_EMPTY_LINE="empty line"
		T_COMMENT="comment"
		T_INDENT_INDENT="increase indent"
		T_INDENT_DEDENT="decrease indent"
		T_INDENT_INHERIT="indent"
		T_INDENT_INVALID="invalid indent"
		T_LITERAL_INVALID_ESCAPE="invalid literal escape"
		T_EOL="newline"

		T_FLAG="flag"
		T_IDENTIFIER="identifier"
		T_MODIFIER_ARG="$"
		T_MODIFIER_DOC="*"
		T_MODIFIER_VERSION="~"
		T_INSTRUCTION="#"
		T_ARG_REF_START="${"
		T_MESSAGE_REF_START="#{"
		T_DYNAMIC="$"
		T_SPAN_START="%{"
		T_OPEN_BRACE="{" // only used in open brace for a literal
		T_CLOSE_BRACE="}"

		T_SPAN_TYPE="span type"
		T_EQUALS="="
		T_NUMBER="number"
	]

	psiImplUtilClass="io.github.sof3.libglocal.idea.psi.Utils"

	implements("lang")=["LgcBlockElement"]
	implements("author")=["LgcBlockElement"]
	implements("version")=["LgcBlockElement"]
	implements("require")=["LgcBlockElement"]
	implements("messages")=["LgcBlockElement" "LgcMessageParentElement"]
	implements("message_group")=["LgcBlockElement" "LgcMessageParentElement"]
	implements("message")=["LgcBlockElement"]
}

/*
About indentation:
The lexer marks the indent of each non-cont line (including 0-byte indents) as a T_INDENT_INHERIT token.
In addition, the lexer inserts T_INDENT_INDENT and pseudo_dedent tokens *before* the T_INDENT_INHERIT token to reflect
the change in indentation level, where these two tokens are equivalent to '{' and '}' in JSON.
 */

libglocal_file ::= (lang | author | version | require)+ messages

private pseudo_dedent ::= T_INDENT_DEDENT | <<eof>>
private line_delim ::= T_EOL | <<eof>>

lang ::= (K_BASE_LANG | K_LANG) lang_id lang_name line_delim {
	methods=[
		getFile
		getChildBlocks
		getName
	]
}
lang_id ::= T_IDENTIFIER
lang_name ::= literal_static

author ::= K_AUTHOR author_name line_delim {
	methods=[
		getFile
		getChildBlocks
		getName
	]
}
author_name ::= literal_static

version ::= K_VERSION version_value line_delim {
	methods=[
		getFile
		getChildBlocks
		getName
	]
}
version_value ::= T_IDENTIFIER

require ::= K_REQUIRE require_target line_delim {
	methods=[
		getFile
		getChildBlocks
		getName
	]
}
require_target ::= T_IDENTIFIER

messages ::= K_MESSAGES message_id line_delim [T_INDENT_INDENT (message_group | message)* pseudo_dedent] {
	methods=[
		getFile
		getChildBlocks
		getMessages
		getName
		getPresentation
	]
}

message_group ::= message_id line_delim [T_INDENT_INDENT (message_group | message)* pseudo_dedent] {
	methods=[
		getFile
		getChildBlocks
		getMessages
		getName
		getFullName
		getPresentation
	]
}

message ::= message_id literal line_delim
	[T_INDENT_INDENT message_modifiers* pseudo_dedent] {
	methods=[
		getFile
		getModifiers
		getChildBlocks
		getName
		getFullName
		getVisibility
		getPresentation
	]

	stubClass="io.github.sof3.libglocal.idea.psi.LgcMessageStub"
	elementTypeFactory="io.github.sof3.libglocal.idea.parser.StubTypeFactory.message"
}

message_id ::= identifier

private message_modifiers ::= (arg_modifier | doc_modifier | version_modifier)
arg_modifier ::= T_MODIFIER_ARG arg_template [T_INDENT_INDENT arg_constraints* pseudo_dedent] {
	implements=["LgcModifierBlock"]
	methods=[
		getFile
		getConstraints
		getChildBlocks
		getName
		getType
		getPresentation
	]

	stubClass="io.github.sof3.libglocal.idea.psi.LgcArgStub"
	elementTypeFactory="io.github.sof3.libglocal.idea.parser.StubTypeFactory.argModifier"
}
private arg_template ::= arg_name [arg_type [arg_default]] line_delim
arg_name ::= T_IDENTIFIER
arg_type ::= identifier
arg_default ::= literal

doc_modifier ::= T_MODIFIER_DOC doc_content? line_delim {
	implements=["LgcModifierBlock"]
	methods=[
		getFile
		getConstraints
		getChildBlocks
	]
}
doc_content ::= literal_static

version_modifier ::= T_MODIFIER_VERSION T_IDENTIFIER line_delim {
	implements=["LgcModifierBlock"]
	methods=[
		getFile
		getConstraints
		getChildBlocks
	]
}

private arg_constraints ::= field_constraint | delim_constraint | doc_constraint
field_constraint ::= T_MODIFIER_ARG arg_template [T_INDENT_INDENT arg_constraints* pseudo_dedent] {
	implements=["LgcConstraintBlock"]
	methods=[
		getFile
		getChildBlocks
		getName
		getType
		getPresentation
	]
}
delim_constraint ::= T_INSTRUCTION "delim" T_IDENTIFIER line_delim
doc_constraint ::= T_MODIFIER_DOC literal_static line_delim

arg_ref ::= T_ARG_REF_START T_IDENTIFIER T_CLOSE_BRACE
message_ref ::= T_MESSAGE_REF_START T_DYNAMIC? T_IDENTIFIER args_supplier T_CLOSE_BRACE
args_supplier ::= args_entry*
args_entry ::= T_IDENTIFIER T_EQUALS args_value
args_value ::= T_NUMBER | T_IDENTIFIER | args_value_string
args_value_string ::= T_OPEN_BRACE literal T_CLOSE_BRACE
span ::= T_SPAN_START T_SPAN_TYPE literal T_CLOSE_BRACE

literal ::= (literal_token)+
private literal_token ::= literal_token_static | arg_ref | message_ref | span
literal_static ::= (literal_token_static)+
private literal_token_static ::= T_LITERAL_STRING | T_LITERAL_ESCAPE | T_CONT_NEWLINE | T_CONT_SPACE | T_CONT_CONCAT

private identifier ::= flag* id
flag ::= T_FLAG
id ::= T_IDENTIFIER
