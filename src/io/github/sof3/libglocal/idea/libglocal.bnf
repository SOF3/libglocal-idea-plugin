/*
 * libglocal-idea-plugin
 *
 * Copyright 2018 SOFe
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
	parserClass="io.github.sof3.libglocal.idea.psi.LibglocalParser"
	extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

	psiClassPrefix="Libglocal"
	psiImplClassSuffix="Impl"
	psiPackage="io.github.sof3.libglocal.idea.psi"
	psiImplPackage="io.github.sof3.libglocal.idea.psi.impl"

	elementTypeHolderClass="io.github.sof3.libglocal.idea.psi.LibglocalElements"
	elementTypeClass="io.github.sof3.libglocal.idea.LibglocalElementType"
	tokenTypeClass="io.github.sof3.libglocal.idea.LibglocalTokenType"

	tokens=[
		T_EMPTY_LINE="empty line"
		T_COMMENT="comment"
		T_INDENT_INDENT="increase indent"
		T_INDENT_DEDENT="decrease indent"
		T_INDENT_INHERIT="indent"
		T_INDENT_INVALID="invalid indent"
		T_LITERAL_INVALID_ESCAPE="invalid literal escape"
		T_EOL="newline"

		T_FLAG="identifier flag"
		T_IDENTIFIER="identifier"
		T_MODIFIER_ARG="$"
		T_MODIFIER_DOC="*"
		T_MODIFIER_VERSION="~"
		T_INSTRUCTION="#"
		T_ARG_REF_START="${"
		T_MESSAGE_REF_START="#{"
		T_DYNAMIC="$"
		T_SPAN_START="%{"
		T_OPEN_BRACE="{" // only used in open brace for a literal
		T_CLOSE_BRACE="}"

		T_SPAN_TYPE="span type"
		T_EQUALS="="
		T_NUMBER="number"
	]

	psiImplUtilClass="io.github.sof3.libglocal.idea.psi.Utils"

	implements("lang_block")=["LibglocalBlockElement"]
	implements("author_block")=["LibglocalBlockElement"]
	implements("version_block")=["LibglocalBlockElement"]
	implements("require_block")=["LibglocalBlockElement"]
	implements("block_messages")=["LibglocalBlockElement" "LibglocalMessageParentElement"]
	implements("block_message_group")=["LibglocalBlockElement" "LibglocalMessageParentElement"]
	implements("block_message")=["LibglocalBlockElement"]

	implements("modifier_arg")=["LibglocalModifierBlock"]
	implements("modifier_doc")=["LibglocalModifierBlock"]
	implements("modifier_version")=["LibglocalModifierBlock"]

	implements("constraint_field")=["LibglocalConstraintBlock"]
}

/*
About indentation:
The lexer marks the indent of each non-cont line (including 0-byte indents) as a T_INDENT_INHERIT token.
In addition, the lexer inserts T_INDENT_INDENT and pseudo_dedent tokens *before* the T_INDENT_INHERIT token to reflect
the change in indentation level, where these two tokens are equivalent to '{' and '}' in JSON.
 */

libglocal_file ::= (lang_block | author_block | version_block | require_block)+ block_messages

private pseudo_dedent ::= T_INDENT_DEDENT | <<eof>>
private line_delim ::= T_EOL | <<eof>>

lang_block ::= (K_BASE_LANG | K_LANG) element_lang_id element_lang_name line_delim {
	methods=[getChildBlocks getName]
}
element_lang_id ::= T_IDENTIFIER
element_lang_name ::= element_literal_static

author_block ::= K_AUTHOR element_literal_static line_delim {
	methods=[getChildBlocks getName]
}

version_block ::= K_VERSION element_version_value line_delim {
	methods=[getChildBlocks getName]
}
element_version_value ::= T_IDENTIFIER

require_block ::= K_REQUIRE element_require_target line_delim {
	methods=[getChildBlocks getName]
}
element_require_target ::= T_IDENTIFIER

block_messages ::= K_MESSAGES element_message_id line_delim [T_INDENT_INDENT (block_message_group | block_message)* pseudo_dedent] {
	methods=[getChildBlocks getMessages getName getPresentation]
}
block_message_group ::= element_message_id line_delim [T_INDENT_INDENT (block_message_group | block_message)* pseudo_dedent] {
	methods=[getChildBlocks getMessages getName getFullName getPresentation]
}
element_message_id ::= message_flag* message_name
message_flag ::= T_FLAG
message_name ::= T_IDENTIFIER

block_message ::= element_message_id element_literal line_delim
	[T_INDENT_INDENT message_modifiers* pseudo_dedent] {
	methods=[getModifiers getChildBlocks getName getFullName getVisibility getPresentation]
	stubClass="io.github.sof3.libglocal.idea.psi.MessageStub"
}

private message_modifiers ::= (modifier_arg | modifier_doc | modifier_version)
modifier_arg ::= T_MODIFIER_ARG arg_template [T_INDENT_INDENT arg_constraints* pseudo_dedent] {
	methods=[getConstraints getChildBlocks getName getType getPresentation]
}
private arg_template ::= element_arg_name [element_arg_type [element_arg_default]] line_delim
element_arg_name ::= T_IDENTIFIER
element_arg_type ::= T_FLAG* T_IDENTIFIER
element_arg_default ::= element_literal

modifier_doc ::= T_MODIFIER_DOC element_literal_static? line_delim {
	methods=[getConstraints getChildBlocks]
}
modifier_version ::= T_MODIFIER_VERSION T_IDENTIFIER line_delim {
	methods=[getConstraints getChildBlocks]
}

private arg_constraints ::= constraint_field | constraint_delim | constraint_doc
constraint_field ::= T_MODIFIER_ARG arg_template [T_INDENT_INDENT arg_constraints* pseudo_dedent] {
	methods=[getChildBlocks getName getType getPresentation]
}
constraint_delim ::= T_INSTRUCTION "delim" T_IDENTIFIER line_delim
constraint_doc ::= T_MODIFIER_DOC element_literal_static line_delim

element_literal ::= (literal_token)+
private literal_token ::= literal_token_static | element_arg_ref | element_message_ref | element_span
element_literal_static ::= (literal_token_static)+
private literal_token_static ::= T_LITERAL_STRING | T_LITERAL_ESCAPE | T_CONT_NEWLINE | T_CONT_SPACE | T_CONT_CONCAT

element_arg_ref ::= T_ARG_REF_START T_IDENTIFIER T_CLOSE_BRACE
element_message_ref ::= T_MESSAGE_REF_START T_DYNAMIC? T_IDENTIFIER element_args_supplier T_CLOSE_BRACE
element_args_supplier ::= element_args_entry*
element_args_entry ::= T_IDENTIFIER T_EQUALS element_args_value
element_args_value ::= T_NUMBER | T_IDENTIFIER | element_args_value_string
element_args_value_string ::= T_OPEN_BRACE element_literal T_CLOSE_BRACE
element_span ::= T_SPAN_START T_SPAN_TYPE element_literal T_CLOSE_BRACE
