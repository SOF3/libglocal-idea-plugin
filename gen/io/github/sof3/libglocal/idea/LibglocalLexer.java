/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.github.sof3.libglocal.idea;

import java.io.Reader;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import io.github.sof3.libglocal.idea.util.StringStack;
import io.github.sof3.libglocal.idea.psi.LibglocalTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LibglocalLexer.flex</tt>
 */
public class LibglocalLexer implements FlexLexer, LibglocalTokens {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int S_LANG_UNNAMED = 2;
  public static final int S_LANG_NAMED = 4;
  public static final int S_AUTHORS = 6;
  public static final int S_VERSION = 8;
  public static final int S_TREE_SOL = 10;
  public static final int S_TREE_MESSAGE = 12;
  public static final int S_TREE_REF_ARG = 14;
  public static final int S_TREE_REF_MESSAGE = 16;
  public static final int S_TREE_REF_MESSAGE_ARGS = 18;
  public static final int S_TREE_REF_MESSAGE_EQUAL_ARG = 20;
  public static final int S_TREE_REF_MESSAGE_END_ARG = 22;
  public static final int S_TREE_REF_MESSAGE_END_ARG_STRING_LITERAL = 24;
  public static final int S_TREE_REF_SPAN_START = 26;
  public static final int S_TREE_REF_SPAN_STYLED = 28;
  public static final int S_TREE_REF_SPAN_SPACE = 30;
  public static final int S_TREE_REF_SPAN_VALUE = 32;
  public static final int S_TREE_ARG = 34;
  public static final int S_TREE_ARG_NAMED = 36;
  public static final int S_TREE_ARG_UNTYPED = 38;
  public static final int S_TREE_ARG_TYPED = 40;
  public static final int S_TREE_ARG_DEFAULT = 42;
  public static final int S_TREE_ARG_POST_DEFAULT = 44;
  public static final int S_TREE_ARG_DEFAULT_STRING_LITERAL = 46;
  public static final int S_TREE_DOC = 48;
  public static final int S_TREE_VERSION = 50;
  public static final int S_C_STYLE_COMMENT = 52;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15296 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\3\12\1"+
    "\14\3\12\1\15\24\12\1\16\1\17\1\20\1\1\7\12\1\21\1\22\1\12\1\23\4\12\1\24"+
    "\10\12\1\23\12\12\1\25\1\12\1\26\1\25\1\12\1\27\1\25\1\12\1\30\1\31\1\12\1"+
    "\32\1\33\1\1\1\32\4\12\1\34\6\12\1\35\1\36\1\37\1\1\3\12\1\40\6\12\1\17\3"+
    "\12\1\41\2\12\1\42\1\1\1\12\1\43\4\1\1\12\1\44\1\1\1\45\1\23\7\12\1\46\1\25"+
    "\1\35\1\47\1\36\1\50\1\51\1\52\1\46\1\17\1\53\1\47\1\36\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\23\1\36\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\36\1\62\1\67\1\70"+
    "\1\46\1\71\1\72\1\73\1\74\1\34\1\75\1\76\1\57\1\1\1\77\1\100\1\36\1\101\1"+
    "\102\1\103\1\46\1\1\1\77\1\100\1\36\1\104\1\102\1\105\1\46\1\106\1\107\1\100"+
    "\1\12\1\40\1\110\1\111\1\46\1\112\1\113\1\114\1\12\1\115\1\116\1\117\1\57"+
    "\1\120\1\25\2\12\1\32\1\121\1\122\2\1\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\2\1\1\64\1\131\1\122\1\132\1\133\1\12\1\134\1\25\1\135\1\133\1\12\1\134\1"+
    "\136\3\1\4\12\1\122\4\12\1\42\2\12\1\137\2\12\1\140\24\12\1\141\1\142\2\12"+
    "\1\141\2\12\1\143\1\144\1\13\3\12\1\144\3\12\1\40\2\1\1\12\1\1\5\12\1\145"+
    "\1\25\45\12\1\37\1\12\1\25\1\32\4\12\1\146\1\147\1\150\1\151\1\12\1\151\1"+
    "\12\1\152\1\150\1\153\5\12\1\154\1\122\1\1\1\155\1\122\5\12\1\27\2\12\1\32"+
    "\4\12\1\60\1\12\1\121\2\43\1\57\1\12\1\42\1\151\2\12\1\43\1\12\2\122\2\1\1"+
    "\12\1\43\3\12\1\121\1\12\1\37\2\122\1\156\1\121\4\1\4\12\1\43\1\122\1\157"+
    "\1\152\7\12\1\152\3\12\1\27\1\101\2\12\1\42\1\147\4\1\1\160\1\12\1\161\17"+
    "\12\1\162\21\12\1\145\2\12\1\145\1\163\1\12\1\42\3\12\1\164\1\165\1\166\1"+
    "\134\1\165\3\1\1\167\1\64\1\170\1\1\1\171\1\1\1\134\3\1\2\12\1\64\1\172\1"+
    "\173\1\174\1\130\1\175\1\1\2\12\1\147\62\1\1\57\2\12\1\122\161\1\2\12\1\121"+
    "\2\12\1\121\10\12\1\176\1\152\2\12\1\137\3\12\1\177\1\167\1\12\1\200\4\201"+
    "\2\12\2\1\1\167\35\1\1\202\1\1\1\25\1\203\1\25\4\12\1\204\1\25\4\12\1\140"+
    "\1\205\1\12\1\42\1\25\4\12\1\121\1\1\1\12\1\32\3\1\1\12\40\1\133\12\1\60\4"+
    "\1\135\12\1\60\2\1\10\12\1\134\4\1\2\12\1\42\20\12\1\134\1\12\1\43\1\1\3\12"+
    "\1\206\7\12\1\17\1\1\1\207\1\210\5\12\1\211\1\12\1\121\1\27\3\1\1\207\2\12"+
    "\1\27\1\1\3\12\1\152\4\12\1\60\1\122\1\12\1\212\2\12\1\42\2\12\1\152\1\12"+
    "\1\134\4\12\1\213\1\122\1\12\1\121\3\12\1\200\1\42\1\122\1\12\1\114\4\12\1"+
    "\33\1\155\1\12\1\214\1\215\1\216\1\201\2\12\1\140\1\60\7\12\1\217\1\122\72"+
    "\12\1\152\1\12\1\220\2\12\1\43\20\1\26\12\1\42\6\12\1\122\2\1\1\200\1\221"+
    "\1\36\1\222\1\223\6\12\1\17\1\1\1\224\25\12\1\42\1\1\4\12\1\210\2\12\1\27"+
    "\2\1\1\43\1\12\1\1\1\12\1\225\1\226\2\1\1\135\7\12\1\134\1\1\1\122\1\25\1"+
    "\227\1\25\1\32\1\57\4\12\1\121\1\230\1\231\2\1\1\232\1\12\1\13\1\233\2\42"+
    "\2\1\7\12\1\32\4\1\3\12\1\151\7\1\1\234\10\1\1\12\1\134\3\12\2\64\1\1\2\12"+
    "\1\1\1\12\1\32\2\12\1\32\1\12\1\42\2\12\1\235\1\236\2\1\11\12\1\42\1\122\2"+
    "\12\1\235\1\12\1\43\2\12\1\27\3\12\1\152\11\1\23\12\1\200\1\12\1\60\1\27\11"+
    "\1\1\237\2\12\1\240\1\12\1\60\1\12\1\200\1\12\1\121\4\1\1\12\1\241\1\12\1"+
    "\60\1\12\1\122\4\1\3\12\1\242\4\1\1\243\1\244\1\12\1\245\2\1\1\12\1\134\1"+
    "\12\1\134\2\1\1\133\1\12\1\200\1\1\3\12\1\60\1\12\1\60\1\12\1\33\1\12\1\17"+
    "\6\1\4\12\1\147\3\1\3\12\1\33\3\12\1\33\60\1\4\12\1\200\1\1\1\57\1\167\3\12"+
    "\1\32\1\1\1\12\1\147\1\122\3\12\1\135\1\1\2\12\1\246\4\12\1\247\1\250\2\1"+
    "\1\12\1\23\1\12\1\251\4\1\1\252\1\30\1\147\3\12\1\32\1\122\1\35\1\47\1\36"+
    "\1\62\1\67\1\253\1\254\1\151\10\1\4\12\1\32\1\122\2\1\4\12\1\255\1\122\12"+
    "\1\3\12\1\256\1\64\1\257\2\1\4\12\1\260\1\122\2\1\3\12\1\27\1\122\3\1\1\12"+
    "\1\101\1\43\1\122\26\1\4\12\1\122\1\167\34\1\3\12\1\147\20\1\1\36\2\12\1\13"+
    "\1\64\1\122\1\1\1\210\1\12\1\210\1\133\1\200\64\1\71\12\1\122\6\1\6\12\1\121"+
    "\1\1\14\12\1\152\53\1\2\12\1\121\75\1\44\12\1\200\33\1\43\12\1\147\1\12\1"+
    "\121\1\122\6\1\1\12\1\42\1\151\3\12\1\200\1\152\1\122\1\224\1\261\1\12\67"+
    "\1\4\12\1\151\2\12\1\121\1\167\1\12\4\1\1\64\1\1\76\12\1\134\1\1\57\12\1\33"+
    "\20\1\1\17\77\1\6\12\1\32\1\134\1\147\1\262\114\1\1\263\1\264\1\265\1\1\1"+
    "\266\11\1\1\267\33\1\5\12\1\135\3\12\1\150\1\270\1\271\1\272\3\12\1\273\1"+
    "\274\1\12\1\275\1\276\1\100\24\12\1\256\1\12\1\100\1\140\1\12\1\140\1\12\1"+
    "\135\1\12\1\135\1\121\1\12\1\121\1\12\1\36\1\12\1\36\1\12\1\277\3\12\40\1"+
    "\3\12\1\220\2\12\1\134\1\300\1\170\1\157\1\25\25\1\1\13\1\211\1\301\75\1\14"+
    "\12\1\151\1\200\2\1\4\12\1\32\1\122\112\1\1\272\1\12\1\302\1\303\1\304\1\305"+
    "\1\306\1\307\1\310\1\43\1\311\1\43\47\1\1\12\1\122\1\12\1\122\1\12\1\122\47"+
    "\1\55\12\1\200\2\1\103\12\1\151\15\12\1\42\150\12\1\17\25\1\41\12\1\42\56"+
    "\1\17\12\41\1");

  /* The ZZ_CMAP_A table has 3232 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\2\0\1\2\22\0\1\1\1\0\1\45\1\41\1\37\1\33\4\0\1\6\1\0\1\27\1"+
    "\43\1\4\1\5\1\44\4\47\5\44\1\56\2\0\1\42\3\0\1\10\1\7\1\31\1\30\1\12\1\54"+
    "\1\15\1\21\1\25\2\26\1\13\1\16\1\14\1\22\1\32\1\26\1\23\1\11\1\20\1\17\1\24"+
    "\1\55\3\26\1\0\1\34\2\0\1\26\1\0\1\10\1\50\1\31\1\30\1\12\1\54\1\15\1\21\1"+
    "\53\2\26\1\13\1\16\1\35\1\22\1\32\1\26\1\46\1\51\1\20\1\52\1\24\1\55\3\26"+
    "\1\40\1\0\1\36\14\0\1\26\12\0\1\26\4\0\1\26\5\0\27\26\1\0\10\26\2\25\35\26"+
    "\1\11\2\26\4\0\14\26\16\0\5\26\7\0\1\26\1\0\1\26\1\0\5\26\1\0\2\26\2\0\4\26"+
    "\1\0\1\26\6\0\1\26\1\0\3\26\1\0\1\26\1\0\4\26\1\0\23\26\1\0\11\26\1\0\26\26"+
    "\2\0\1\26\6\0\10\26\10\0\16\26\1\0\1\26\1\0\2\26\1\0\2\26\1\0\1\26\10\0\13"+
    "\26\5\0\3\26\15\0\12\26\4\0\6\26\1\0\10\26\2\0\12\26\1\0\23\26\2\0\14\26\2"+
    "\0\11\26\4\0\1\26\5\0\16\26\2\0\14\26\4\0\5\26\1\0\10\26\6\0\20\26\2\0\13"+
    "\26\2\0\16\26\1\0\1\26\3\0\4\26\2\0\11\26\2\0\2\26\2\0\4\26\10\0\1\26\4\0"+
    "\2\26\1\0\1\26\1\0\3\26\1\0\6\26\4\0\2\26\1\0\2\26\1\0\2\26\1\0\2\26\2\0\1"+
    "\26\1\0\5\26\4\0\2\26\2\0\3\26\3\0\1\26\7\0\4\26\1\0\1\26\7\0\20\26\13\0\3"+
    "\26\1\0\11\26\1\0\2\26\1\0\2\26\1\0\5\26\2\0\12\26\1\0\3\26\1\0\3\26\2\0\1"+
    "\26\30\0\1\26\7\0\3\26\1\0\10\26\2\0\6\26\2\0\2\26\2\0\3\26\10\0\2\26\4\0"+
    "\2\26\1\0\1\26\1\0\1\26\20\0\2\26\1\0\6\26\3\0\3\26\1\0\4\26\3\0\2\26\1\0"+
    "\1\26\1\0\2\26\3\0\2\26\3\0\3\26\3\0\5\26\3\0\3\26\1\0\4\26\2\0\1\26\6\0\1"+
    "\26\10\0\4\26\1\0\10\26\1\0\3\26\1\0\30\26\3\0\10\26\1\0\3\26\1\0\4\26\7\0"+
    "\2\26\1\0\3\26\5\0\4\26\1\0\5\26\2\0\4\26\5\0\2\26\7\0\1\26\2\0\2\26\16\0"+
    "\3\26\1\0\10\26\1\0\7\26\1\0\3\26\1\0\5\26\5\0\4\26\7\0\1\26\12\0\6\26\2\0"+
    "\2\26\1\0\22\26\3\0\10\26\1\0\11\26\1\0\1\26\2\0\7\26\3\0\1\26\4\0\6\26\1"+
    "\0\1\26\1\0\10\26\2\0\2\26\14\0\17\26\1\0\12\26\7\0\2\26\1\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\1\26\6\0\4\26\1\0\7\26\1\0\3\26\1\0\1\26\1\0\1\26\2\0\2\26\1"+
    "\0\15\26\1\0\3\26\2\0\5\26\1\0\1\26\1\0\6\26\2\0\12\26\2\0\4\26\10\0\2\26"+
    "\13\0\1\26\1\0\1\26\1\0\1\26\4\0\12\26\1\0\24\26\3\0\5\26\1\0\12\26\6\0\1"+
    "\26\11\0\6\26\1\0\1\26\5\0\1\26\2\0\13\26\1\0\15\26\1\0\4\26\2\0\7\26\1\0"+
    "\1\26\1\0\4\26\2\0\1\26\1\0\4\26\2\0\7\26\1\0\1\26\1\0\4\26\2\0\16\26\2\0"+
    "\6\26\2\0\13\26\3\0\13\26\7\0\15\26\1\0\7\26\13\0\4\26\14\0\1\26\1\0\2\26"+
    "\14\0\4\26\3\0\1\26\4\0\2\26\15\0\3\26\11\0\1\26\23\0\10\26\1\0\23\26\1\0"+
    "\2\26\6\0\6\26\5\0\15\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0\6\26\1\0\7\26\1\0"+
    "\1\26\3\0\3\26\1\0\7\26\3\0\4\26\2\0\6\26\23\0\1\26\4\0\1\26\14\0\1\26\15"+
    "\0\1\26\2\0\1\26\4\0\1\26\2\0\12\26\1\0\1\26\3\0\5\26\6\0\1\26\1\0\1\26\1"+
    "\0\1\26\1\0\4\26\1\0\1\26\5\0\5\26\4\0\1\26\1\0\5\26\6\0\15\26\7\0\10\26\11"+
    "\0\7\26\1\0\7\26\6\0\3\26\11\0\5\26\2\0\5\26\3\0\7\26\2\0\2\26\2\0\3\26\5"+
    "\0\16\26\1\0\12\26\1\0\1\26\7\0\11\26\2\0\27\26\2\0\15\26\3\0\1\26\1\0\1\26"+
    "\2\0\1\26\16\0\1\26\2\0\5\26\12\0\6\26\2\0\6\26\2\0\6\26\11\0\13\26\1\0\2"+
    "\26\2\0\7\26\4\0\5\26\3\0\5\26\5\0\12\26\1\0\5\26\1\0\1\26\1\0\2\26\1\0\2"+
    "\26\1\0\12\26\3\0\15\26\3\0\2\26\30\0\16\26\4\0\1\26\2\0\6\26\2\0\6\26\2\0"+
    "\6\26\2\0\3\26\3\0\14\26\1\0\16\26\1\0\2\26\1\0\1\26\15\0\1\26\2\0\4\26\4"+
    "\0\10\26\1\0\5\26\12\0\6\26\2\0\1\26\1\0\14\26\1\0\2\26\3\0\1\26\2\0\4\26"+
    "\1\0\2\26\12\0\10\26\6\0\6\26\1\0\2\26\5\0\10\26\1\0\3\26\1\0\13\26\4\0\3"+
    "\26\4\0\5\26\2\0\1\26\11\0\5\26\5\0\3\26\3\0\13\26\1\0\1\26\3\0\10\26\6\0"+
    "\1\26\1\0\7\26\1\0\1\26\1\0\4\26\1\0\2\26\6\0\1\26\5\0\7\26\2\0\7\26\3\0\6"+
    "\26\1\0\1\26\10\0\6\26\2\0\10\26\10\0\6\26\2\0\1\26\3\0\1\26\13\0\10\26\5"+
    "\0\15\26\3\0\2\26\6\0\5\26\3\0\6\26\10\0\10\26\2\0\7\26\16\0\4\26\4\0\3\26"+
    "\15\0\1\26\2\0\2\26\2\0\4\26\1\0\14\26\1\0\1\26\1\0\7\26\1\0\21\26\1\0\4\26"+
    "\2\0\10\26\1\0\7\26\1\0\14\26\1\0\4\26\1\0\5\26\1\0\1\26\3\0\11\26\1\0\10"+
    "\26\2\0\2\26\5\0\1\26\12\0\2\26\1\0\2\26\1\0\5\26\6\0\2\26\1\0\1\26\2\0\1"+
    "\26\1\0\12\26\1\0\4\26\1\0\1\26\1\0\1\26\6\0\1\26\4\0\1\26\1\0\1\26\1\0\1"+
    "\26\1\0\3\26\1\0\2\26\1\0\1\26\2\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\2\26\1\0\1\26\2\0\4\26\1\0\7\26\1\0\4\26\1\0\4\26\1\0\1\26\1\0\12\26"+
    "\1\0\5\26\1\0\3\26\1\0\5\26\1\0\5\26");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\33\0\1\1\1\2\2\3\6\1\1\2\2\4\1\5"+
    "\2\6\1\7\1\2\1\10\1\11\1\12\5\13\2\14"+
    "\2\15\1\14\2\1\1\16\3\1\1\17\1\20\1\21"+
    "\1\2\1\22\1\23\1\24\1\1\1\25\2\26\1\27"+
    "\1\30\3\14\1\1\1\31\5\1\3\32\1\1\1\33"+
    "\1\34\1\35\1\36\1\37\1\2\1\40\2\41\1\42"+
    "\1\43\1\1\2\14\1\1\1\44\3\45\1\1\4\46"+
    "\1\0\1\47\1\50\7\0\4\13\1\51\1\52\1\53"+
    "\1\54\2\0\1\26\1\50\1\55\6\0\1\56\1\41"+
    "\1\0\1\50\1\0\1\57\5\0\1\50\4\13\1\27"+
    "\5\0\1\42\1\60\1\0\1\61\2\0\1\62\2\13"+
    "\1\63\3\0\1\64\3\0\2\13\5\0\1\65\1\13"+
    "\1\0\1\66\2\0\1\13\1\67\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439"+
    "\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u04f5\0\u0582"+
    "\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u04f5"+
    "\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u04f5\0\u07e5\0\u0814"+
    "\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u04f5\0\u0582\0\u09bb\0\u09ea\0\u04f5\0\u0a19\0\u0a48\0\u0a77"+
    "\0\u0aa6\0\u04f5\0\u0ad5\0\u0b04\0\u0b33\0\u04f5\0\u04f5\0\u0b62"+
    "\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u04f5\0\u0c4d\0\u0c7c\0\u0cab"+
    "\0\u0cda\0\u04f5\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u04f5"+
    "\0\u0d09\0\u0dc5\0\u0df4\0\u04f5\0\u0e23\0\u0e52\0\u0e81\0\u0eb0"+
    "\0\u0edf\0\u04f5\0\u0f0e\0\u0f3d\0\u0f6c\0\u04f5\0\u0f9b\0\u04f5"+
    "\0\u0a77\0\u0fca\0\u04f5\0\u0ff9\0\u0468\0\u1028\0\u1057\0\u04f5"+
    "\0\u0a77\0\u0582\0\u1086\0\u0582\0\u10b5\0\u04f5\0\u10e4\0\u1113"+
    "\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b"+
    "\0\u12ba\0\u04f5\0\u04f5\0\u04f5\0\u04f5\0\u0a77\0\u0b62\0\u12e9"+
    "\0\u0c4d\0\u04f5\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403"+
    "\0\u04f5\0\u1432\0\u0f9b\0\u0ff9\0\u1057\0\u04f5\0\u1461\0\u1490"+
    "\0\u14bf\0\u14ee\0\u151d\0\u0729\0\u154c\0\u157b\0\u15aa\0\u15d9"+
    "\0\u12e9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u1432\0\u16f3"+
    "\0\u1722\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b"+
    "\0\u189a\0\u18c9\0\u18f8\0\u04f5\0\u1927\0\u1956\0\u1985\0\u19b4"+
    "\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c"+
    "\0\u1b5b\0\u1a70\0\u1b8a\0\u1bb9\0\u1be8\0\u04f5\0\u1bb9\0\u1c17";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\34\1\35\1\36\1\37\1\34\1\40\1\34\1\41"+
    "\1\42\2\34\1\43\2\34\1\44\5\34\1\45\23\34"+
    "\1\41\7\34\1\46\1\47\1\50\1\34\1\40\1\34"+
    "\20\51\1\34\3\51\2\34\1\51\6\34\1\51\1\34"+
    "\10\51\1\34\1\52\1\53\1\47\1\50\1\52\1\40"+
    "\51\52\1\54\1\55\1\47\1\50\1\54\1\40\21\54"+
    "\1\56\27\54\1\34\1\46\1\47\1\50\1\57\1\40"+
    "\1\34\20\57\1\34\3\57\2\34\1\57\5\34\2\57"+
    "\1\34\10\57\2\34\1\60\1\36\1\37\1\61\1\40"+
    "\1\34\1\61\1\62\1\63\5\61\1\64\7\61\1\34"+
    "\1\65\2\61\2\34\1\61\5\34\2\61\1\34\3\61"+
    "\1\63\1\64\3\61\1\34\1\66\1\67\1\70\1\71"+
    "\1\66\1\72\25\66\1\73\1\74\1\66\1\75\1\76"+
    "\1\66\1\77\15\66\1\34\1\100\2\34\1\101\1\40"+
    "\1\34\20\101\1\34\3\101\2\34\1\101\1\102\4\34"+
    "\2\101\1\34\10\101\2\34\1\100\2\34\1\103\1\40"+
    "\1\34\20\103\1\34\3\103\2\34\1\103\5\34\2\103"+
    "\1\34\10\103\2\34\1\104\2\34\1\105\1\40\1\34"+
    "\20\105\1\106\3\105\2\34\1\105\1\107\4\34\2\105"+
    "\1\34\10\105\2\34\1\110\3\34\1\40\34\34\1\111"+
    "\15\34\1\100\2\34\1\112\1\40\1\34\20\112\1\34"+
    "\3\112\2\34\1\112\5\34\1\113\1\114\1\115\1\112"+
    "\1\114\6\112\1\34\1\116\1\117\1\36\1\37\1\116"+
    "\1\120\26\116\1\121\10\116\1\122\11\116\1\34\1\104"+
    "\3\34\1\40\3\34\1\123\1\124\1\34\1\125\4\34"+
    "\1\126\3\34\1\127\7\34\1\125\12\34\1\130\1\131"+
    "\1\130\1\132\1\34\1\133\2\34\1\104\3\34\1\40"+
    "\30\34\1\134\21\34\1\135\3\34\1\40\52\34\1\100"+
    "\3\34\1\40\52\34\1\100\2\34\1\136\1\40\1\34"+
    "\20\136\1\34\3\136\2\34\1\136\5\34\2\136\1\34"+
    "\10\136\2\34\1\137\1\70\1\71\1\34\1\40\52\34"+
    "\1\100\2\34\1\140\1\40\1\34\20\140\1\34\3\140"+
    "\2\34\1\140\5\34\2\140\1\34\10\140\2\34\1\141"+
    "\1\70\1\71\1\34\1\40\34\34\1\142\15\34\1\100"+
    "\2\34\1\143\1\40\1\34\20\143\1\34\3\143\2\34"+
    "\1\143\5\34\1\144\1\145\1\146\1\143\1\145\6\143"+
    "\2\34\1\147\1\36\1\37\1\34\1\40\51\34\1\150"+
    "\1\151\2\34\1\150\1\72\26\150\1\152\10\150\1\153"+
    "\11\150\1\154\1\155\1\70\1\71\1\154\1\156\51\154"+
    "\1\34\1\157\1\70\1\71\1\57\1\40\1\34\20\57"+
    "\1\34\3\57\2\34\1\57\5\34\2\57\1\34\10\57"+
    "\1\34\1\160\1\161\3\160\1\162\1\163\50\160\60\0"+
    "\1\35\1\36\1\37\1\0\1\164\54\0\1\37\60\0"+
    "\1\165\1\166\60\0\1\167\65\0\1\170\32\0\1\170"+
    "\14\0\1\171\60\0\1\172\56\0\1\173\45\0\1\46"+
    "\1\47\1\50\1\0\1\164\54\0\1\50\62\0\20\51"+
    "\1\0\3\51\2\0\1\51\6\0\1\51\1\0\10\51"+
    "\1\0\2\52\2\0\1\52\1\174\52\52\1\53\1\47"+
    "\1\50\1\52\1\175\51\52\2\54\2\0\1\54\1\0"+
    "\21\54\1\0\30\54\1\55\1\47\1\50\1\54\1\164"+
    "\21\54\1\0\27\54\4\0\1\57\2\0\20\57\1\0"+
    "\3\57\2\0\1\57\5\0\2\57\1\0\10\57\2\0"+
    "\1\60\1\36\1\37\1\0\1\164\55\0\1\61\2\0"+
    "\20\61\1\0\3\61\2\0\1\61\5\0\2\61\1\0"+
    "\10\61\5\0\1\61\2\0\14\61\1\176\3\61\1\0"+
    "\3\61\2\0\1\61\5\0\2\61\1\0\1\176\7\61"+
    "\5\0\1\61\2\0\16\61\1\177\1\61\1\0\3\61"+
    "\2\0\1\61\5\0\2\61\1\0\5\61\1\177\2\61"+
    "\5\0\1\61\2\0\20\61\1\0\2\61\1\200\2\0"+
    "\1\61\5\0\2\61\1\0\10\61\5\0\1\61\2\0"+
    "\13\61\1\201\4\61\1\0\3\61\2\0\1\61\5\0"+
    "\2\61\1\0\10\61\1\0\2\66\2\0\1\66\1\0"+
    "\25\66\2\0\1\66\2\0\1\66\1\0\16\66\1\67"+
    "\1\70\1\71\1\66\1\164\25\66\2\0\1\66\2\0"+
    "\1\66\1\0\15\66\3\0\1\71\113\0\1\202\23\0"+
    "\1\203\25\0\1\203\1\0\3\203\1\0\1\203\55\0"+
    "\1\204\56\0\1\205\17\0\1\206\3\0\1\164\55\0"+
    "\1\101\2\0\20\101\1\0\3\101\2\0\1\101\5\0"+
    "\2\101\1\0\10\101\5\0\1\103\2\0\20\103\1\0"+
    "\3\103\2\0\1\103\5\0\2\103\1\0\10\103\2\0"+
    "\1\104\3\0\1\164\55\0\1\105\2\0\20\105\1\0"+
    "\3\105\2\0\1\105\5\0\2\105\1\0\10\105\2\0"+
    "\1\207\3\0\1\164\34\0\1\111\15\0\1\111\61\0"+
    "\1\112\2\0\20\112\1\0\3\112\2\0\1\112\5\0"+
    "\2\112\1\0\10\112\5\0\1\112\2\0\20\112\1\0"+
    "\3\112\2\0\1\112\5\0\1\112\1\114\1\0\1\112"+
    "\1\114\6\112\5\0\1\210\2\0\20\112\1\0\3\112"+
    "\2\0\1\112\5\0\1\112\1\114\1\0\1\112\1\114"+
    "\6\112\1\0\2\116\2\0\30\116\1\0\10\116\1\0"+
    "\12\116\1\117\1\36\1\37\1\116\1\120\26\116\1\0"+
    "\10\116\1\0\13\116\2\0\1\116\1\165\1\211\25\116"+
    "\1\0\10\116\1\0\11\116\35\212\1\203\7\212\2\203"+
    "\10\212\17\0\1\213\32\0\1\213\27\0\1\214\22\0"+
    "\1\214\32\0\1\215\47\0\1\216\57\0\1\217\20\0"+
    "\1\217\31\0\1\220\47\0\1\135\3\0\1\164\55\0"+
    "\1\136\2\0\20\136\1\0\3\136\2\0\1\136\5\0"+
    "\2\136\1\0\10\136\2\0\1\137\1\70\1\71\1\0"+
    "\1\164\55\0\1\140\2\0\20\140\1\0\3\140\2\0"+
    "\1\140\5\0\2\140\1\0\10\140\1\221\1\0\1\141"+
    "\1\70\1\71\1\0\1\164\55\0\1\143\2\0\20\143"+
    "\1\0\3\143\2\0\1\143\5\0\2\143\1\0\10\143"+
    "\5\0\1\143\2\0\20\143\1\0\3\143\2\0\1\143"+
    "\5\0\1\143\1\145\1\0\1\143\1\145\6\143\5\0"+
    "\1\222\2\0\20\143\1\0\3\143\2\0\1\143\5\0"+
    "\1\143\1\145\1\0\1\143\1\145\6\143\2\0\1\223"+
    "\1\36\1\37\1\0\1\164\116\0\1\203\11\0\2\154"+
    "\2\0\55\154\2\0\1\154\1\165\1\224\50\154\1\0"+
    "\1\225\1\70\1\71\1\0\1\164\56\0\1\226\51\0"+
    "\2\165\2\0\53\165\11\0\1\227\37\0\1\227\25\0"+
    "\1\230\52\0\1\231\20\0\1\231\32\0\1\232\37\0"+
    "\1\232\30\0\1\233\22\0\1\233\10\0\2\52\2\0"+
    "\1\52\1\0\53\52\2\0\1\52\1\165\1\234\50\52"+
    "\4\0\1\61\2\0\6\61\1\235\11\61\1\0\3\61"+
    "\2\0\1\61\5\0\2\61\1\0\10\61\5\0\1\61"+
    "\2\0\5\61\1\236\12\61\1\0\3\61\2\0\1\236"+
    "\5\0\2\61\1\0\10\61\5\0\1\61\2\0\20\61"+
    "\1\0\1\237\2\61\2\0\1\61\5\0\2\61\1\0"+
    "\10\61\5\0\1\61\2\0\20\61\1\0\1\61\1\240"+
    "\1\61\2\0\1\61\5\0\2\61\1\0\10\61\5\0"+
    "\1\112\2\0\20\112\1\0\3\112\2\0\1\112\5\0"+
    "\1\112\1\241\1\0\1\112\1\241\6\112\32\0\1\242"+
    "\50\0\1\243\22\0\1\243\30\0\1\244\105\0\1\130"+
    "\63\0\1\245\25\0\1\246\22\0\1\246\14\0\1\143"+
    "\2\0\20\143\1\0\3\143\2\0\1\143\5\0\1\143"+
    "\1\247\1\0\1\143\1\247\6\143\13\0\1\250\65\0"+
    "\1\251\52\0\1\252\52\0\1\253\37\0\1\253\16\0"+
    "\1\254\37\0\1\254\6\0\1\255\2\0\1\61\2\0"+
    "\20\61\1\0\3\61\2\0\1\61\5\0\2\61\1\0"+
    "\10\61\5\0\1\61\2\0\20\61\1\0\1\61\1\256"+
    "\1\61\2\0\1\61\5\0\2\61\1\0\10\61\5\0"+
    "\1\61\2\0\1\61\1\257\16\61\1\0\3\61\2\0"+
    "\1\61\5\0\2\61\1\0\10\61\2\0\1\260\2\0"+
    "\1\61\2\0\20\61\1\0\3\61\2\0\1\61\5\0"+
    "\2\61\1\0\10\61\32\0\1\261\47\0\1\262\61\0"+
    "\1\263\25\0\1\263\25\0\1\264\50\0\1\264\20\0"+
    "\1\264\22\0\1\250\77\0\1\265\35\0\1\252\65\0"+
    "\1\266\73\0\1\267\25\0\1\267\4\0\1\255\61\0"+
    "\1\61\2\0\3\61\1\270\14\61\1\0\3\61\2\0"+
    "\1\61\5\0\2\61\1\0\10\61\5\0\1\61\2\0"+
    "\11\61\1\271\6\61\1\0\3\61\2\0\1\61\5\0"+
    "\2\61\1\0\10\61\2\0\1\260\67\0\1\272\67\0"+
    "\1\264\22\0\1\264\41\0\1\273\50\0\1\274\22\0"+
    "\1\274\25\0\1\275\63\0\1\276\35\0\1\277\2\0"+
    "\1\61\2\0\20\61\1\0\3\61\2\0\1\61\5\0"+
    "\2\61\1\0\10\61\5\0\1\61\2\0\3\61\1\300"+
    "\14\61\1\0\3\61\2\0\1\61\5\0\2\61\1\0"+
    "\10\61\12\0\1\301\37\0\1\301\17\0\1\264\45\0"+
    "\1\302\67\0\1\303\60\0\1\304\20\0\1\304\22\0"+
    "\1\277\61\0\1\61\2\0\20\61\1\0\1\305\2\61"+
    "\2\0\1\61\5\0\2\61\1\0\10\61\12\0\1\264"+
    "\37\0\1\264\16\0\1\306\37\0\1\306\6\0\1\307"+
    "\56\0\1\310\2\0\1\61\2\0\20\61\1\0\3\61"+
    "\2\0\1\61\5\0\2\61\1\0\10\61\2\0\1\310"+
    "\55\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7238];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\33\0\1\11\2\1\1\11\10\1\1\11\5\1\1\11"+
    "\12\1\1\11\3\1\1\11\4\1\1\11\3\1\2\11"+
    "\5\1\1\11\4\1\1\11\5\1\1\11\3\1\1\11"+
    "\5\1\1\11\3\1\1\11\1\1\1\11\2\1\1\11"+
    "\4\1\1\11\3\1\1\0\1\1\1\11\7\0\4\1"+
    "\4\11\2\0\2\1\1\11\6\0\1\11\1\1\1\0"+
    "\1\1\1\0\1\11\5\0\6\1\5\0\2\1\1\0"+
    "\1\1\2\0\4\1\3\0\1\11\3\0\2\1\5\0"+
    "\2\1\1\0\1\1\2\0\1\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
//	private StringStack indentStack = new StringStack();
	private int stateBeforeBlockComment = -1;

	public LibglocalLexer(){
		this((Reader) null);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LibglocalLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 58: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 59: break;
          case 3: 
            { return EOL;
            } 
            // fall through
          case 60: break;
          case 4: 
            { yybegin(YYINITIAL); return EOL;
            } 
            // fall through
          case 61: break;
          case 5: 
            { yybegin(S_LANG_NAMED); return LANG_NAME;
            } 
            // fall through
          case 62: break;
          case 6: 
            { return LANG_LOCAL;
            } 
            // fall through
          case 63: break;
          case 7: 
            { return AUTHOR_NAME;
            } 
            // fall through
          case 64: break;
          case 8: 
            { return AUTHOR_SEPARATOR;
            } 
            // fall through
          case 65: break;
          case 9: 
            { return VERSION_VALUE;
            } 
            // fall through
          case 66: break;
          case 10: 
            { return INDENT;
            } 
            // fall through
          case 67: break;
          case 11: 
            { yybegin(S_TREE_MESSAGE); return MESSAGE_ID;
            } 
            // fall through
          case 68: break;
          case 12: 
            { return LITERAL;
            } 
            // fall through
          case 69: break;
          case 13: 
            { yybegin(S_TREE_SOL); return EOL;
            } 
            // fall through
          case 70: break;
          case 14: 
            { return PERCENT_CLOSE;
            } 
            // fall through
          case 71: break;
          case 15: 
            { return ARG_NAME;
            } 
            // fall through
          case 72: break;
          case 16: 
            { yybegin(S_TREE_MESSAGE); return DOLLAR_CLOSE;
            } 
            // fall through
          case 73: break;
          case 17: 
            { yybegin(S_TREE_REF_MESSAGE_ARGS); return MESSAGE_ID;
            } 
            // fall through
          case 74: break;
          case 18: 
            { yybegin(S_TREE_REF_MESSAGE_EQUAL_ARG); return ARG_NAME;
            } 
            // fall through
          case 75: break;
          case 19: 
            { return ARGS_SEPARATOR;
            } 
            // fall through
          case 76: break;
          case 20: 
            { yybegin(S_TREE_MESSAGE); return HASH_CLOSE;
            } 
            // fall through
          case 77: break;
          case 21: 
            { yybegin(S_TREE_REF_MESSAGE_END_ARG); return ARG_EQUALS;
            } 
            // fall through
          case 78: break;
          case 22: 
            { yybegin(S_TREE_REF_MESSAGE_ARGS); return ARG_NAME;
            } 
            // fall through
          case 79: break;
          case 23: 
            { yybegin(S_TREE_REF_MESSAGE_ARGS); return NUMBER_LITERAL;
            } 
            // fall through
          case 80: break;
          case 24: 
            { yybegin(S_TREE_REF_MESSAGE_END_ARG_STRING_LITERAL); return OPEN_QUOTE;
            } 
            // fall through
          case 81: break;
          case 25: 
            { yybegin(S_TREE_REF_MESSAGE_ARGS); return CLOSE_QUOTE;
            } 
            // fall through
          case 82: break;
          case 26: 
            { yybegin(S_TREE_REF_SPAN_SPACE); return SPAN_NAME;
            } 
            // fall through
          case 83: break;
          case 27: 
            { yybegin(S_TREE_MESSAGE); return PERCENT_CLOSE;
            } 
            // fall through
          case 84: break;
          case 28: 
            { yybegin(S_TREE_MESSAGE); return WHITE_SPACE;
            } 
            // fall through
          case 85: break;
          case 29: 
            { yybegin(S_TREE_ARG_NAMED); return ARG_NAME;
            } 
            // fall through
          case 86: break;
          case 30: 
            { yybegin(S_TREE_ARG_UNTYPED); return WHITE_SPACE;
            } 
            // fall through
          case 87: break;
          case 31: 
            { yybegin(S_TREE_ARG_TYPED); return ARG_TYPE;
            } 
            // fall through
          case 88: break;
          case 32: 
            { yybegin(S_TREE_ARG_DEFAULT); return ARG_EQUALS;
            } 
            // fall through
          case 89: break;
          case 33: 
            { yybegin(S_TREE_SOL); return ARG_NAME;
            } 
            // fall through
          case 90: break;
          case 34: 
            { yybegin(S_TREE_SOL); return NUMBER_LITERAL;
            } 
            // fall through
          case 91: break;
          case 35: 
            { yybegin(S_TREE_ARG_DEFAULT_STRING_LITERAL); return OPEN_QUOTE;
            } 
            // fall through
          case 92: break;
          case 36: 
            { yybegin(S_TREE_SOL); return CLOSE_QUOTE;
            } 
            // fall through
          case 93: break;
          case 37: 
            { return DOC_VALUE;
            } 
            // fall through
          case 94: break;
          case 38: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 95: break;
          case 39: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 96: break;
          case 40: 
            { stateBeforeBlockComment = yystate(); yybegin(S_C_STYLE_COMMENT); return BLOCK_COMMENT;
            } 
            // fall through
          case 97: break;
          case 41: 
            { yybegin(S_TREE_REF_SPAN_START); return PERCENT_OPEN;
            } 
            // fall through
          case 98: break;
          case 42: 
            { return ESCAPE;
            } 
            // fall through
          case 99: break;
          case 43: 
            { yybegin(S_TREE_REF_ARG); return DOLLAR_OPEN;
            } 
            // fall through
          case 100: break;
          case 44: 
            { yybegin(S_TREE_REF_MESSAGE); return HASH_OPEN;
            } 
            // fall through
          case 101: break;
          case 45: 
            { return ESCAPE_ILLEGAL;
            } 
            // fall through
          case 102: break;
          case 46: 
            { return ARG_TYPE_MODIFIER;
            } 
            // fall through
          case 103: break;
          case 47: 
            { yybegin(stateBeforeBlockComment); return BLOCK_COMMENT;
            } 
            // fall through
          case 104: break;
          case 48: 
            { return BASE_KEYWORD;
            } 
            // fall through
          case 105: break;
          case 49: 
            { yybegin(S_LANG_UNNAMED); return LANG_KEYWORD;
            } 
            // fall through
          case 106: break;
          case 50: 
            { yybegin(S_TREE_ARG); return ARG_KEYWORD;
            } 
            // fall through
          case 107: break;
          case 51: 
            { yybegin(S_TREE_DOC); return DOC_KEYWORD;
            } 
            // fall through
          case 108: break;
          case 52: 
            { yybegin(S_TREE_REF_SPAN_STYLED); return SPAN_STYLE;
            } 
            // fall through
          case 109: break;
          case 53: 
            { yybegin(S_TREE_VERSION); return SINCE_KEYWORD;
            } 
            // fall through
          case 110: break;
          case 54: 
            { yybegin(S_AUTHORS); return AUTHOR_KEYWORD;
            } 
            // fall through
          case 111: break;
          case 55: 
            { yybegin(S_TREE_SOL); return MESSAGES_KEYWORD;
            } 
            // fall through
          case 112: break;
          case 56: 
            { yybegin(S_VERSION); return VERSION_KEYWORD;
            } 
            // fall through
          case 113: break;
          case 57: 
            { yybegin(S_TREE_VERSION); return UPDATED_KEYWORD;
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
